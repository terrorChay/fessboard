import streamlit as st
import utils as utils
from my_query import query_dict
import pandas as pd
import re
from io import BytesIO
# from pyxlsb import open_workbook as open_xlsb
# import xlsxwriter
from pandas.api.types import (
    is_categorical_dtype,
    is_datetime64_any_dtype,
    is_numeric_dtype,
    is_object_dtype,
)
import plotly.express as px

# Apply filters and return filtered dataset
def filter_dataframe(df: pd.DataFrame, cols_to_ignore=[]) -> pd.DataFrame:
    st.sidebar.write('–í—ã–≤–æ–¥–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã')
    cols_in_df      = df.columns.values
    cols_dict       = {}
    for col_name in cols_in_df:
        cols_dict[col_name] = st.sidebar.checkbox(col_name, True, key=f"display_{col_name}")
    cols_to_display = [k for k, v in cols_dict.items() if v]
    df = df[cols_to_display].copy()
    # Try to convert datetimes into a standard format (datetime, no timezone)
    for col in df.columns:
        if is_object_dtype(df[col]):
            try:
                df[col] = pd.to_datetime(df[col])
            except Exception:
                pass

        if is_datetime64_any_dtype(df[col]):
            df[col] = df[col].dt.tz_localize(None)

    modification_container = st.container()
    with modification_container:
        cols = [col for col in df.columns if col not in cols_to_ignore]
        to_filter_columns = st.multiselect("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", cols, key='select_filters')
        for column in to_filter_columns:
            left, right = st.columns((1, 20))
            left.write("‚îî")
            # if any(map(df[column].name.__contains__, ['–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', '–ö—É—Ä–∞—Ç–æ—Ä—ã', '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã'])):
            #     options = pd.Series([x for _list in df[column][df[column].notna()] for x in _list]).unique()
            #     user_cat_input = right.multiselect(
            #         f"{column}",
            #         options,
            #     )
            #     if user_cat_input:
            #         df = df[df[column].astype(str).str.contains('|'.join(user_cat_input))]
            # el
            if is_numeric_dtype(df[column]):
                _min = float(df[column].min())
                _max = float(df[column].max())
                step = 1.00
                user_num_input = right.slider(
                    f" {column}",
                    min_value=_min,
                    max_value=_max,
                    value=(_min, _max),
                    step=step,
                )
                df = df[df[column].between(*user_num_input)]
            elif is_datetime64_any_dtype(df[column]):
                _min = df[column].min()
                _max = df[column].max()
                user_date_input = right.date_input(
                    f" {column}",
                    value=(
                        _min,
                        _max,
                    ),
                    max_value=_max,
                    min_value=_min,
                )
                if len(user_date_input) == 2:
                    user_date_input = tuple(map(pd.to_datetime, user_date_input))
                    start_date, end_date = user_date_input
                    df = df.loc[df[column].between(start_date, end_date)]
            elif is_categorical_dtype(df[column]) or any(map(df[column].name.__contains__, ['–ö—É—Ä—Å', '–ü–æ—Ç–æ–∫', '–í–£–ó', '–†–µ–≥–∏–æ–Ω', '–ü—Ä–æ–≥—Ä–∞–º–º–∞'])):
                options = df[column].unique()
                user_cat_input = right.multiselect(
                    f"{column}",
                    options,
                )
                if user_cat_input:
                    _cat_input = user_cat_input
                    df = df[df[column].isin(_cat_input)]
            else:
                user_text_input = right.text_input(
                    f"{column} —Å–æ–¥–µ—Ä–∂–∏—Ç",
                )
                if user_text_input:
                    df = df[df[column].astype(str).str.contains(user_text_input, na=False, flags=re.IGNORECASE)]
    # Try to convert datetimes into displayable date formats
    for col in df.columns:
        if is_datetime64_any_dtype(df[col]):
            df[col] = df[col].dt.strftime('%d-%m-%Y')
    return df

def agg_students(students_df: pd.DataFrame, students_in_projects_df: pd.DataFrame):
    students = students_df.copy()
    participations = students_in_projects_df[['ID —Å—Ç—É–¥–µ–Ω—Ç–∞', '–ö—É—Ä–∞—Ç–æ—Ä', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', '–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –≥–æ–¥']].copy()
    # date limitation on projects
    options = sorted(participations['–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –≥–æ–¥'].unique())
    user_cat_input = st.multiselect(
        f"–£—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥—ã",
        options,
        default=options,
    )
    if user_cat_input:
        _cat_input = user_cat_input
        participations = participations[participations['–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –≥–æ–¥'].isin(_cat_input)]
    #
    df_k = participations.groupby(['ID —Å—Ç—É–¥–µ–Ω—Ç–∞']).agg({'–ö—É—Ä–∞—Ç–æ—Ä':'sum', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä':'sum'}).reset_index().rename(columns ={'–ö—É—Ä–∞—Ç–æ—Ä':'–ö—É—Ä–∏—Ä–æ–≤–∞–ª (—Ä–∞–∑)', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä':'–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–ª (—Ä–∞–∑)'})
    df_j = participations.loc[(participations['–ö—É—Ä–∞—Ç–æ—Ä'] == 0) & (participations['–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'] == 0)].value_counts('ID —Å—Ç—É–¥–µ–Ω—Ç–∞').reset_index().rename(columns ={0:'–£—á–∞—Å—Ç–≤–æ–≤–∞–ª (—Ä–∞–∑)'})
    agg_df = df_k.merge(df_j, how='inner', on='ID —Å—Ç—É–¥–µ–Ω—Ç–∞')
    agg_df = students.merge(agg_df, how='left', on='ID —Å—Ç—É–¥–µ–Ω—Ç–∞').fillna(0)
    return agg_df

# App launch
def run():
    # Load dataframe
    with st.spinner('–ò–∑—É—á–∞–µ–º –≤–µ–¥–æ–º–æ—Å—Ç–∏...'):
        students_in_projects_df = utils.load_students_in_projects()
    with st.spinner('–ó–∞–¥–µ–π—Å—Ç–≤—É–µ–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥...'):
        students_df             = utils.load_students()
    st.title('–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
    st.write('''
            #### –ù–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä–∫—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º!
            :art: __–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏__ –≤—ã–≤–æ–¥—è—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n
            :floppy_disk: –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Microsoft Excel.
            ''')
    # draw criteria filters and return filtered df
    students_pivot_df = agg_students(students_df, students_in_projects_df)
    df_filters_applied  = filter_dataframe(students_pivot_df)
    # if filters have results -> draw DF, download btn and analytics
    if 0 not in df_filters_applied.shape:
        tab1, tab2 = st.tabs(["–î–∞–Ω–Ω—ã–µ", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
        with tab1:
            st.dataframe(df_filters_applied)
            col1, col2, _col3, _col4, _col5, _col6 = st.columns(6)
            col1.download_button('üíæ CSV', data=utils.convert_df(students_pivot_df), file_name="fessboard_students_slice.csv", mime='text/csv', use_container_width=True)
            col2.download_button('üíæ Excel', data=utils.convert_df(students_pivot_df, True), file_name="fessboard_students_slice.xlsx", use_container_width=True)
        with tab2:
            st.write('–∫–∞–∫–∞—è-—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞')
    else:
        # Technically only possible with long string criteria filters cuz they allow for any string input
        st.warning('–°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')

if __name__ == "__main__":
    utils.page_config(layout='wide', title='–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤')
    utils.remove_footer()
    utils.set_logo()
    run()