import streamlit as st
from streamlit import session_state as session
import utils as utils
import pandas as pd
import numpy as np
import re
from pandas.api.types import (
    is_categorical_dtype,
    is_datetime64_any_dtype,
    is_numeric_dtype,
    is_object_dtype,
    is_float_dtype,
)
import plotly.express as px
from connectdb import mysql_conn
from datetime import date
import plotly.graph_objects as go
from plotly.subplots import make_subplots

#–ù–∞–±–æ—Ä—ã —Ü–≤–µ—Ç–æ–≤
colors0 = ['#FF7C68','#FF9E8C','#FFBFB1','#FFDFD7','#F85546','#ED1C24',]
colors1 = ['#ED1C24','#F2595F','#C9A0DC','#F0DC82','#FFDAB9','#0ABCFF','#556832']
colors2 = px.colors.qualitative.Light24
colors3 = ['#ED1C24','#F2595F']
colors4 = ['#3A42FF','#FB832A','#D0455E','#82CD97','#45B0D0','#7A45D0','#88B1FF','#2227A7']
colors40 = ['#3A42FF','#45B0D0','#7A45D0','#88B1FF','#2227A7','#FB832A','#D0455E','#82CD97']
colors5 = ['#ED1C24','#F7A3A6']
test = ['#5E60CE','#5390D9','#4EA8DE','#48BFE3','#56CFE1','#64DFDF','#72EFDD','#80FFDB','#7400B8','#6930C3',]
colors6 = ['#FF5744','#F2595F','#C9A0DC','#F0DC82','#FFDAB9','#0ABCFF','#556832']

tr='rgba(0,0,0,0)'
colors = colors0
marker = colors[5]

font="Source Sans Pro"
config = {'staticPlot': False,'displayModeBar': False}

# Apply search filters and return filtered dataset
def search_dataframe(df: pd.DataFrame, label='–ü–æ–∏—Å–∫') -> pd.DataFrame:

    df = df.copy()

    user_text_input = st.text_input(label, placeholder='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', help='–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –í–∞—Å –ø—Ä–æ–µ–∫—Ç—ã')

    if user_text_input:
        _user_text_input = "".join([char for char in user_text_input if char.isalnum()])
        mask = df.apply(lambda x: x.astype(str).str.contains(_user_text_input, na=False, flags=re.IGNORECASE))
        df = df.loc[mask.any(axis=1)]

    return df

# Apply filters and return filtered dataset
def filter_dataframe(df: pd.DataFrame, cols_to_ignore: list) -> pd.DataFrame:

    df = df.copy()

    # Try to convert datetimes into a standard format (datetime, no timezone)
    for col in df.columns:
        if is_object_dtype(df[col]):
            try:
                df[col] = pd.to_datetime(df[col])
            except Exception:
                pass

        if is_datetime64_any_dtype(df[col]):
            df[col] = df[col].dt.tz_localize(None)
    
    modification_container = st.container()

    with modification_container:
        cols = [col for col in df.columns if col not in cols_to_ignore]
        to_filter_columns = st.multiselect("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", cols)
        for column in to_filter_columns:
            left, right = st.columns((1, 20))
            left.write("‚îî")
            if '–ú–µ–Ω–µ–¥–∂–µ—Ä' in df[column].name or '–ö—É—Ä–∏—Ä—É—é—â–∏–π' in df[column].name:
                options = pd.Series([x for _list in df[column][df[column].notna()] for x in _list]).unique()
                user_cat_input = right.multiselect(
                    f"{column}",
                    options,
                )
                if user_cat_input:
                    df = df[df[column].astype(str).str.contains('|'.join(user_cat_input))]
            elif is_numeric_dtype(df[column]):
                _min = float(df[column].min())
                _max = float(df[column].max())
                step = (_max - _min) / 100
                user_num_input = right.slider(
                    f" {column}",
                    min_value=_min,
                    max_value=_max,
                    value=(_min, _max),
                    step=step,
                )
                df = df[df[column].between(*user_num_input)]
            elif is_datetime64_any_dtype(df[column]):
                user_date_input = right.date_input(
                    f" {column}",
                    value=(
                        df[column].min(),
                        df[column].max(),
                    ),
                )
                if len(user_date_input) == 2:
                    user_date_input = tuple(map(pd.to_datetime, user_date_input))
                    start_date, end_date = user_date_input
                    df = df.loc[df[column].between(start_date, end_date)]
            elif (is_categorical_dtype(df[column]) or df[column].nunique() < 10 or df[column].map(len).max() < 255) and ('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞' not in df[column].name):
                options = df[column].unique()
                user_cat_input = right.multiselect(
                    f"{column}",
                    options,
                )
                if user_cat_input:
                    _cat_input = user_cat_input
                    df = df[df[column].isin(_cat_input)]
            else:
                user_text_input = right.text_input(
                    f"{column}",
                )
                if user_text_input:
                    df = df[df[column].astype(str).str.contains(user_text_input, na=False, flags=re.IGNORECASE)]

    # Try to convert datetimes into displayable date formats
    for col in df.columns:
        if is_datetime64_any_dtype(df[col]):
            df[col] = df[col].dt.strftime('%d-%m-%Y')

    return df

# Apply filters and return company name
def select_student(df: pd.DataFrame):
    student_id = False
    df = df[['ID —Å—Ç—É–¥–µ–Ω—Ç–∞', '–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞']].copy().dropna().drop_duplicates()
    df.insert(0, '–°–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á', df['ID —Å—Ç—É–¥–µ–Ω—Ç–∞'].astype('str') + ' - ' + df['–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞'])
    options = np.insert(df['–°–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á'].unique(), 0, '–ù–µ –≤—ã–±—Ä–∞–Ω–æ', axis=0)

    ## preselection tweak once again to preserve selected company in case related filters get adjusted
    preselection = 0
    if 'student_selectbox' in session:
        try:
            preselection = int(np.where(options == session['student_selectbox'])[0][0])
        except:
            pass

    selected_student = st.selectbox("–°—Ç—É–¥–µ–Ω—Ç", options, index=preselection,key='student_selectbox', )
    if selected_student and selected_student != '–ù–µ –≤—ã–±—Ä–∞–Ω–æ':
        student_id = int(selected_student.split(' - ')[0])

    return student_id


# App launch
def run():
    # Load data
    with st.spinner('–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º Agile...'):
        projects_df             = utils.load_projects()
    with st.spinner('–ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –∫–æ—Å–º–æ—Å–∞...'):
        students_in_projects_df = utils.load_students_in_projects()
    with st.spinner('–ï—â–µ —á—É—Ç—å-—á—É—Ç—å –∏ –ø—Ä—è–º–æ –≤ —Ä–∞–π...'):
        students_df             = utils.load_students()
    with st.spinner('–ó–≤–æ–Ω–∏–º –≤ –¥–µ–∫–∞–Ω–∞—Ç...'):
        fields_df               = utils.load_fields()

    st.title('–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å—Ç—É–¥–µ–Ω—Ç–∞')
    st.write('''
            #### –ù–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞!
            :mag: –£ –∫–æ—Ä–æ–≤—ã –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∑–∞–±–æ—Ç  
            :art: –ï—Å—Ç —Ç—Ä–∞–≤—É  
            :male-student: –ò –º–æ–ª–æ–∫–æ –¥–∞–µ—Ç\n

            :floppy_disk: —ã—ã
            ''')

    student_id = select_student(students_df)
    if student_id:
        student_info = students_df.loc[students_df['ID —Å—Ç—É–¥–µ–Ω—Ç–∞'] == student_id]
        projects_with_student_df = students_in_projects_df.loc[students_in_projects_df['ID —Å—Ç—É–¥–µ–Ω—Ç–∞'] == student_id]
        if projects_with_student_df.shape[0] > 0:  
            tab1, tab2, tab3, tab4 = st.tabs(['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–£—á–∞—Å—Ç–Ω–∏–∫', '–ö—É—Ä–∞—Ç–æ—Ä', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'])
            # Analytics tab
            with tab1:
                student_fullname = student_info['–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞'].values[0]
                st.subheader(student_fullname)
                st.markdown(f"""
                            **–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:** {student_info['–í–£–ó'].values[0]}  
                            **–ö—É—Ä—Å:** {student_info['–ö—É—Ä—Å'].values[0]}, {student_info['–ü—Ä–æ–≥—Ä–∞–º–º–∞'].values[0]}  
                            **–ü–æ—Ç–æ–∫:** {student_info['–ü–æ—Ç–æ–∫'].values[0]}
                            """)
                projects_summary = {
                    '–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤'    : projects_with_student_df.loc[(projects_with_student_df['–°—Ç–∞—Ç—É—Å'] == '–ó–∞–≤–µ—Ä—à–µ–Ω')|(projects_with_student_df['–°—Ç–∞—Ç—É—Å'] == '–ó–∞–º–æ—Ä–æ–∂–µ–Ω')].shape[0],
                    '–ü—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ'     : projects_with_student_df.loc[projects_with_student_df['–°—Ç–∞—Ç—É—Å'] == '–ê–∫—Ç–∏–≤–µ–Ω'].shape[0],
                    '–õ—é–±–∏–º–∞—è –∫–æ–º–ø–∞–Ω–∏—è'      : projects_df.loc[projects_df['ID –ø—Ä–æ–µ–∫—Ç–∞'].isin(projects_with_student_df['ID –ø—Ä–æ–µ–∫—Ç–∞'])]['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'].mode()[0],
                    '–í –ø—Ä–æ–µ–∫—Ç–∞—Ö'          : f"c {projects_with_student_df['–ö—É—Ä—Å –≤ –º–æ–º–µ–Ω—Ç–µ'].min()} –∫—É—Ä—Å–∞",
                }
                projects_summary_df = projects_with_student_df[['ID –ø—Ä–æ–µ–∫—Ç–∞', '–ö—É—Ä–∞—Ç–æ—Ä', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä']].merge(projects_df[['ID –ø—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', '–ú–∏–∫—Ä–æ-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ì—Ä–µ–π–¥']], "left", "ID –ø—Ä–æ–µ–∫—Ç–∞", )
                st.download_button(label='üíæ –°–∫–∞—á–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', data=utils.student_to_pdf(student_info, projects_summary, projects_summary_df), file_name=f"{student_fullname}.pdf", mime="application/pdf",)
                # Project summary metrics
                cols = st.columns(4)
                for idx, key in enumerate(list(projects_summary)):
                    cols[idx].metric(key, projects_summary[key])
                # Project summary visualization
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.markdown('**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –º–∞–∫—Ä–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º**')
                    data = projects_df.loc[projects_df['ID –ø—Ä–æ–µ–∫—Ç–∞'].isin(projects_with_student_df['ID –ø—Ä–æ–µ–∫—Ç–∞'])]['–ú–∞–∫—Ä–æ-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'].value_counts().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                    data = data.rename(columns={'index':'–ú–∞–∫—Ä–æ'})
                    data = data.drop_duplicates().merge(fields_df['–ú–∞–∫—Ä–æ'].drop_duplicates(), on='–ú–∞–∫—Ä–æ', how='right').fillna(0).sort_values(by='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                    fig = px.line_polar(data,r='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',theta='–ú–∞–∫—Ä–æ',line_close=True,color_discrete_sequence=colors)
                    fig.update_traces(fill='toself',mode='lines+markers',cliponaxis=False)
                    fig.update_layout(
                        font_family=font,
                        font_size = 10,
                        paper_bgcolor = tr,
                        plot_bgcolor  = tr,
                        height = 300,
                        yaxis_visible   = False,)
                    fig.update_layout(polar = dict(radialaxis = dict(showticklabels = False,tick0=0,dtick=1)))
                    st.plotly_chart(fig,use_container_width=True,config={'staticPlot': False,'displayModeBar': False})
                        
                with col2:
                    data = projects_df.loc[projects_df['ID –ø—Ä–æ–µ–∫—Ç–∞'].isin(projects_with_student_df['ID –ø—Ä–æ–µ–∫—Ç–∞'])]['–ú–∏–∫—Ä–æ-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'].value_counts().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                    data = data.rename(columns={'index':'–ú–∏–∫—Ä–æ'})
                    st.markdown('**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –º–∏–∫—Ä–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º**')
                    fig = px.pie(data,
                    values                  = data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
                    names                   = data['–ú–∏–∫—Ä–æ'],
                    color_discrete_sequence = colors,
                    )

                    fig.update_traces(
                        textposition  = 'inside',
                        textinfo      = 'value',
                        hovertemplate = "<b>%{label}.</b> –ü—Ä–æ–µ–∫—Ç–æ–≤: <b>%{value}.</b> <br><b>%{percent}</b> –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞",
                        textfont_size = 20,
                        insidetextorientation = 'auto',
                        
                        )

                    fig.update_layout(
                    # annotations           = [dict(text=projects_df.shape[0], x=0.5, y=0.5, font_size=40, showarrow=False, font=dict(family=font,color="white"))],
                    plot_bgcolor            = tr,
                    paper_bgcolor           = tr,
                    legend                  = dict(orientation="h",itemwidth=50,yanchor="top", y=-0,xanchor="left",x=0),
                    showlegend              = True,
                    font_family             = font,
                    title_font_family       = font,
                    title_font_color        = "white",
                    legend_title_font_color = "white",
                    height                  = 300,
                    margin                  = dict(t=40, l=0, r=0, b=0),
                    #legend=dict(orientation="h",yanchor="bottom",y=-0.4,xanchor="center",x=0,itemwidth=70,bgcolor = 'yellow')
                    )

                    st.plotly_chart(fig,use_container_width=True,config={'staticPlot': False,'displayModeBar': False})
                with col3:
                    st.markdown('**–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –∫—É—Ä—Å–∞–º**')
                    projects_by_year_df = projects_with_student_df
                    projects_by_year_df['–ö—É—Ä—Å'] = projects_by_year_df[['–ö—É—Ä—Å –≤ –º–æ–º–µ–Ω—Ç–µ','–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤ –º–æ–º–µ–Ω—Ç–µ']].agg(' '.join,axis=1).map(lambda x:x[:5]+'.')
                    projects_by_year_df = projects_by_year_df[['–ö—É—Ä—Å']].copy().sort_values('–ö—É—Ä—Å').value_counts(sort=True).reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                    df = pd.DataFrame(data=['1 –ë–∞–∫.','2 –ë–∞–∫.','3 –ë–∞–∫.','4 –ë–∞–∫.','1 –ú–∞–≥.','2 –ú–∞–≥.'],columns=['–ö—É—Ä—Å'])
                    df = df.merge(projects_by_year_df,how='left',on='–ö—É—Ä—Å')
                    df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].fillna(0).map(lambda x:int(x))
                    fig = go.Figure()

                    fig.add_trace(go.Bar(
                            x                   = df['–ö—É—Ä—Å'],
                            y                   = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
                            width               = 0.7,
                            name                = '–ü—Ä–æ–µ–∫—Ç–æ–≤',
                            marker_color        = marker,
                            opacity             = 1,
                            marker_line_width   = 0,
                            text                = list(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']),
                            ))
                        
                    fig.update_layout(
                        font_family    = font,
                        font_size      = 13,
                        paper_bgcolor  = tr,
                        plot_bgcolor   = tr,
                        margin         = dict(t=50, l=0, r=0, b=0),
                        yaxis_title    = "",
                        xaxis_title    = "",
                        width          = 10,
                        height         = 290,
                        xaxis_visible  = True,
                        yaxis_visible  = True,
                        xaxis          = dict(showgrid=False), 
                        yaxis          = dict(showgrid=True),
                        showlegend     = False
                        )
                    fig.update_traces(
                        textfont_size   = 14,
                        textangle      = 0,
                        textposition   = "auto",
                        cliponaxis     = False,
                        )
                    
                    st.plotly_chart(fig,use_container_width=True,config={'staticPlot': True,'displayModeBar': False})
            # Display regular projects 
            with tab2:
                regular_projects = projects_with_student_df.loc[(projects_with_student_df['–ö—É—Ä–∞—Ç–æ—Ä'] == 0) & (projects_with_student_df['–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'] == 0)]
                regular_projects_idx = regular_projects['ID –ø—Ä–æ–µ–∫—Ç–∞']
                if regular_projects_idx.shape[0] > 0:
                    regular_projects_df = projects_df.loc[projects_df['ID –ø—Ä–æ–µ–∫—Ç–∞'].isin(regular_projects_idx)]
                    st.dataframe(regular_projects_df)
                else:
                    st.warning('–°—Ç—É–¥–µ–Ω—Ç –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö.')
            # Display curated projects
            with tab3:
                curated_projects = projects_with_student_df.loc[projects_with_student_df['–ö—É—Ä–∞—Ç–æ—Ä'] == 1]
                curated_projects_idx = curated_projects['ID –ø—Ä–æ–µ–∫—Ç–∞']
                if curated_projects_idx.shape[0] > 0:
                    curated_projects_df = projects_df.loc[projects_df['ID –ø—Ä–æ–µ–∫—Ç–∞'].isin(curated_projects_idx)]
                    st.dataframe(curated_projects_df)
                else:
                    st.warning('–°—Ç—É–¥–µ–Ω—Ç –ø–æ–∫–∞ –Ω–µ –≤—ã—Å—Ç—É–ø–∞–ª –≤ —Ä–æ–ª–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞.')
            # Display moderated projects
            with tab4:
                moderated_projects = projects_with_student_df.loc[projects_with_student_df['–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'] == 1]
                moderated_projects_idx = moderated_projects['ID –ø—Ä–æ–µ–∫—Ç–∞']
                if moderated_projects_idx.shape[0] > 0:
                    moderated_projects_df = projects_df.loc[projects_df['ID –ø—Ä–æ–µ–∫—Ç–∞'].isin(moderated_projects_idx)]
                    st.dataframe(moderated_projects_df)
                else:
                    st.warning('–°—Ç—É–¥–µ–Ω—Ç –ø–æ–∫–∞ –Ω–µ –≤—ã—Å—Ç—É–ø–∞–ª –≤ —Ä–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.')
            # Radar chart
            
        else:
            st.warning('–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    else:
        st.markdown(f"<h4 style='text-align: center;'>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ üòé</h4>", unsafe_allow_html=True)
    
if __name__ == "__main__":
    utils.page_config(layout='wide', title='–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫–æ–º–ø–∞–Ω–∏–∏')
    utils.load_local_css('css/student.css')
    utils.remove_footer()
    utils.set_logo()
    run()