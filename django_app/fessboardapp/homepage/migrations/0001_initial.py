# Generated by Django 4.1.3 on 2023-02-12 18:45

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Companies',
            fields=[
                ('company_id', models.AutoField(primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=255)),
                ('company_website', models.TextField()),
                ('company_logo', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'companies',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompanySpheres',
            fields=[
                ('company_sphere_id', models.AutoField(primary_key=True, serialize=False)),
                ('company_sphere', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'company_spheres',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyTypes',
            fields=[
                ('company_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('company_type', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'company_types',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('event_id', models.AutoField(primary_key=True, serialize=False)),
                ('event_name', models.CharField(max_length=255)),
                ('event_start_date', models.DateField()),
                ('event_end_date', models.DateField()),
                ('event_description', models.TextField()),
                ('is_frozen', models.IntegerField()),
            ],
            options={
                'db_table': 'events',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FieldSpheres',
            fields=[
                ('sphere_id', models.AutoField(primary_key=True, serialize=False)),
                ('sphere', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'field_spheres',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ManagersInEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'managers_in_events',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ParticipantsInEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'participants_in_events',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectFields',
            fields=[
                ('field_id', models.AutoField(primary_key=True, serialize=False)),
                ('field', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'project_fields',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectGrades',
            fields=[
                ('grade_id', models.AutoField(primary_key=True, serialize=False)),
                ('grade', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'project_grades',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('project_id', models.AutoField(primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=255)),
                ('project_description', models.TextField()),
                ('project_result', models.TextField()),
                ('is_frozen', models.IntegerField()),
                ('project_start_date', models.DateField()),
                ('project_end_date', models.DateField()),
                ('project_dateadded', models.DateTimeField(blank=True, db_column='project_dateAdded', null=True)),
                ('project_dateupdated', models.DateTimeField(blank=True, db_column='project_dateUpdated', null=True)),
            ],
            options={
                'db_table': 'projects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Regions',
            fields=[
                ('region_id', models.AutoField(primary_key=True, serialize=False)),
                ('region', models.CharField(max_length=255)),
                ('is_foreign', models.IntegerField()),
            ],
            options={
                'db_table': 'regions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Students',
            fields=[
                ('student_id', models.AutoField(primary_key=True, serialize=False)),
                ('student_surname', models.CharField(max_length=255)),
                ('student_name', models.CharField(max_length=255)),
                ('student_midname', models.CharField(max_length=255)),
                ('bachelors_start_year', models.TextField(blank=True, null=True)),
                ('masters_start_year', models.TextField(blank=True, null=True)),
                ('student_birthday', models.DateField()),
                ('is_banned', models.IntegerField()),
            ],
            options={
                'db_table': 'students',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StudentsInProjects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_curator', models.IntegerField()),
                ('is_moderator', models.IntegerField()),
                ('team', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'students_in_projects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Teachers',
            fields=[
                ('teacher_id', models.AutoField(primary_key=True, serialize=False)),
                ('teacher_surname', models.CharField(max_length=255)),
                ('teacher_name', models.CharField(max_length=255)),
                ('teacher_midname', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'teachers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TeachersInEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'teachers_in_events',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TeachersInProjects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'teachers_in_projects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Universities',
            fields=[
                ('university_id', models.AutoField(primary_key=True, serialize=False)),
                ('university_name', models.CharField(max_length=255)),
                ('university_logo', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'universities',
                'managed': False,
            },
        ),
    ]
